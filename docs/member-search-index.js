memberSearchIndex = [{"p":"com.example","c":"Node","l":"addChild(Node)","url":"addChild(com.example.Node)"},{"p":"com.example","c":"ExpressionTreeBuilder","l":"buildExpressionTree(String, Map<String, Double>, Map<String, Function<Double, Double>>)","url":"buildExpressionTree(java.lang.String,java.util.Map,java.util.Map)"},{"p":"com.example","c":"TokenType","l":"COMMA"},{"p":"com.example","c":"TokenType","l":"EOF"},{"p":"com.example","c":"ExpressionTreeEvaluator","l":"evaluateExpressionTree(Node, Map<String, Double>, Map<String, Function<Double, Double>>)","url":"evaluateExpressionTree(com.example.Node,java.util.Map,java.util.Map)"},{"p":"com.example","c":"ExpressionTreeBuilder","l":"ExpressionTreeBuilder()","url":"%3Cinit%3E()"},{"p":"com.example","c":"ExpressionTreeEvaluator","l":"ExpressionTreeEvaluator()","url":"%3Cinit%3E()"},{"p":"com.example","c":"ExpressionTreeTests","l":"ExpressionTreeTests()","url":"%3Cinit%3E()"},{"p":"com.example","c":"Node","l":"getChildren()"},{"p":"com.example","c":"Node","l":"getType()"},{"p":"com.example","c":"Token","l":"getType()"},{"p":"com.example","c":"Node","l":"getValue()"},{"p":"com.example","c":"Token","l":"getValue()"},{"p":"com.example","c":"TokenType","l":"LEFT_PAREN"},{"p":"com.example","c":"Main","l":"Main()","url":"%3Cinit%3E()"},{"p":"com.example","c":"Main","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"com.example","c":"Node","l":"Node(String, NodeType)","url":"%3Cinit%3E(java.lang.String,com.example.NodeType)"},{"p":"com.example","c":"NodeType","l":"NUMBER"},{"p":"com.example","c":"TokenType","l":"NUMBER"},{"p":"com.example","c":"NodeType","l":"OPERATOR"},{"p":"com.example","c":"TokenType","l":"OPERATOR"},{"p":"com.example","c":"Parser","l":"parse()"},{"p":"com.example","c":"Parser","l":"Parser(List<Token>, Map<String, Double>, Map<String, Function<Double, Double>>)","url":"%3Cinit%3E(java.util.List,java.util.Map,java.util.Map)"},{"p":"com.example","c":"TokenType","l":"RIGHT_PAREN"},{"p":"com.example","c":"ExpressionTreeTests","l":"testComplexExpression()"},{"p":"com.example","c":"ExpressionTreeTests","l":"testFunctionExpression()"},{"p":"com.example","c":"ExpressionTreeTests","l":"testInvalidExpression()"},{"p":"com.example","c":"ExpressionTreeTests","l":"testSimpleExpression()"},{"p":"com.example","c":"ExpressionTreeTests","l":"testVariableExpression()"},{"p":"com.example","c":"Token","l":"Token(String, TokenType)","url":"%3Cinit%3E(java.lang.String,com.example.TokenType)"},{"p":"com.example","c":"Tokenizer","l":"tokenize()"},{"p":"com.example","c":"Tokenizer","l":"Tokenizer(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"com.example","c":"Node","l":"toString()"},{"p":"com.example","c":"Token","l":"toString()"},{"p":"com.example","c":"NodeType","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"com.example","c":"TokenType","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"com.example","c":"NodeType","l":"values()"},{"p":"com.example","c":"TokenType","l":"values()"},{"p":"com.example","c":"NodeType","l":"VARIABLE_OR_FUNCTION"},{"p":"com.example","c":"TokenType","l":"VARIABLE_OR_FUNCTION"}]